import signal

def handler(signum, frame):
    raise Exception("Time out for exploiting.")

signal.signal(signal.SIGALRM, handler)


# Import whatever you need here.
# If you are using something that is needed to
# be install, please contact the operations person
from pwn import *
import requests

class Exploit:

    def __init__(self):
        self.fname = __file__

        # which service to exploit
        self.target = "game1"
        
        # the priority to use this exploit,
        # integer from 1 to 100, 1 has the top priority
        self.level = 1
        
        # Author of the exploit to contact
        self.author = "n0b0dy"
        
        # Set timeout for this exploit
        self.timeout = 3

    def do_attack(self, ip, port):
        # Write your exploit here and return the flag
        return "flag{fake_flag_" + str(ip) + ":" + str(port) + "}"

    
    def attack(self, ip, port):
        signal.alarm(self.timeout)
        ret = ""
        try:
            ret = self.do_attack(ip, port)
            signal.alarm(0) # release SIGALRM
        except Exception as e:
            print e
            ret = ""
        return ret

    def __str__(self):
        n = ""
        if self.fname.endswith(".py"):
            n = self.fname[:-3]
        if self.fname.endswith(".pyc"):
            n = self.fname[:-4]
        return "[EXP] {name}".format(name=n)
